generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//  ------------------------------------------------------------
// USER LOGED IN VIA GITHUB
//  ------------------------------------------------------------

model User {
  id             String    @id @default(uuid())
  name           String?
  username       String    @unique @db.VarChar(255)
  email          String?   @default("")
  image          String?
  accessToken    String?
  githubId       String    @unique @db.VarChar(255)
  tokenExpiresAt DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  attributes     Json?

  projects              Project[]
  SharedProjectRelation SharedProjectRelation[]

  @@map("users")
}

model Installation {
  id             String   @id @default(uuid())
  installationId String   @unique
  type           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  payload        Json
  githubId       String   @unique
  githubName     String

  @@map("installations")
}

model Project {
  id                    String                  @id @default(uuid())
  name                  String
  createdAt             DateTime                @default(now())
  updatedAt             DateTime                @updatedAt
  owner                 String
  ownerType             String
  paths                 Json
  userId                String
  repoName              String                  @default("")
  defaultBranch         String                  @default("")

  user                  User                    @relation(fields: [userId], references: [id])
  SharedProjectRelation SharedProjectRelation[]

  @@map("projects")
}

model SharedProjectRelation {
  id        String  @id @default(uuid())
  projectId String
  project   Project @relation(fields: [projectId], references: [id])
  userId    String
  user      User    @relation(fields: [userId], references: [id])

  @@map("shared_project_relations")
}
